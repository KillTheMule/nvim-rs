name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NVIMRS_LOG_FILE: nvim-rs.log
  NVIMRS_LOG_LEVEL: debug
  NVIMRS_STDERR: nvim-rs.stderr
  RUSTFLAGS: -C opt-level=0
  NVIM_DEPS_BUILD_DIR: ${{ format('{0}/neovim/nvim-deps', github.workspace) }}
  NVIM_DEPS_PREFIX: ${{ format('{0}/neovim/nvim-deps/usr', github.workspace) }}
  NVIM_CONFIG: MINGW_64

jobs:
  all:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            rust: nightly

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust ${{ matrix.rust }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true

    ### CACHING ###################################
    # Note: Purportedly buggy on macos, so we leave that out
    - name: Cargo Cache Linux
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v1
      with:
        path: ~/.cargo
        key: ${{ matrix.os }}-cargo-${{ matrix.rust}}-${{ hashFiles('Cargo.toml') }}

    - name: Cargo Target Cache Linux
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ matrix.os }}-cargo-${{ matrix.rust}}-target-${{ hashFiles('Cargo.toml') }}
    ###############################################

    - name: Check
      run: |
        cargo check && cargo check --examples --features use_tokio && cargo check --examples --features use_async-std

    ### NEOVIM REQUIREMENTS #######################
    - name: Install neovim requirements on linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y libtool-bin gettext ccache ninja-build

    - name: Install neovim requirements on osx
      if: matrix.os == 'macos-latest'
      run: |
        # Workaround brew issues
        rm -f /usr/local/bin/2to3
        brew unlink gcc@9
        brew update >/dev/null
        brew upgrade
        brew install automake ccache perl cpanminus ninja
    ###############################################

    - name: Check out neovim sources
      run: |
        git submodule update --init --recursive

    ### CACHING NEOVIM DEPS #######################
    - name: Cache neovim dependencies on linux/osx
      if: matrix.os != 'windows-latest'
      uses: actions/cache@v2
      with:
        path: |
          $HOME/.cache/nvim-deps
          $HOME/.ccache
        key: ${{ matrix.os }}-${{ hashFiles('neovim/cmake/*', 'neovim/third-party/**', 'neovim/**/CMakeLists.txt') }}
    - name: Cache neovim dependencies on windows
      uses: actions/cache@v2
      with:
        path: ${{ env.NVIM_DEPS_BUILD_DIR }}
        key: ${{ env.NVIM_CONFIG }}-${{ hashFiles('neovim\third-party\**') }}
    ###############################################

    ### BUILD NEOVIM ##############################
    - name: Build neovim on linux/osx
      if: matrix.os != 'windows-latest'
      run: |
        cd neovim
        make
        cd ..
        neovim/build/bin/nvim --version

    - name: Build neovim on windows
      if: matrix.os == 'windows-latest'
      env:
        CONFIGURATION: ${{ env.NVIM_CONFIG }}
        DEPS_BUILD_DIR: ${{ env.NVIM_DEPS_BUILD_DIR }}
        DEPS_PREFIX: ${{ env.NVIM_DEPS_PREFIX}}
      run: |
        cd neovim
        powershell ci\build.ps1 -NoTests
        cd ..
        neovim\build\bin\nvim.exe --version
    ###############################################

    -name: Build basic example
     run: |
        cargo build --example basic --features use_tokio

    - name: Tests
      run: |
        cargo test -- --nocapture && cargo test --features use_tokio -- --nocapture && cargo test --features use_async-std -- --nocapture

    - name: Benchtests
      run: |
            cargo bench --features use_tokio -- --test && cargo bench --features use_async-std -- --test
